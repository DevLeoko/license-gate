{
	"openapi": "3.0.0",
	"components": {
		"examples": {},
		"headers": {},
		"parameters": {},
		"requestBodies": {},
		"responses": {},
		"schemas": {
			"ReplenishInterval": {
				"type": "string",
				"enum": [
					"TEN_SECONDS",
					"MINUTE",
					"HOUR",
					"DAY"
				]
			},
			"License": {
				"description": "A license with all its properties and restrictions.",
				"properties": {
					"id": {
						"type": "integer",
						"format": "int32",
						"description": "License ID."
					},
					"active": {
						"type": "boolean",
						"description": "Whether the license is active.\r\nWhen a license is disabled, it will not validate."
					},
					"userId": {
						"type": "integer",
						"format": "int32",
						"description": "User ID that owns this license (you)."
					},
					"licenseKey": {
						"type": "string",
						"description": "License key."
					},
					"name": {
						"type": "string",
						"description": "Name to identify the license."
					},
					"notes": {
						"type": "string",
						"description": "Notes for the license."
					},
					"ipLimit": {
						"type": "integer",
						"format": "int32",
						"nullable": true,
						"description": "Limit of IPs that can validate this license.\r\nSee https://docs.licensegate.io/restriction-options/ip-limit",
						"default": null
					},
					"ipBoundEnabled": {
						"anyOf": [
							{
								"type": "boolean"
							},
							{
								"type": "boolean",
								"enum": [
									false
								]
							}
						],
						"description": "Whether to bind this license to the first IP that uses it."
					},
					"ip": {
						"type": "string",
						"nullable": true,
						"description": "The first IP that used this license.",
						"default": null
					},
					"licenseScope": {
						"type": "string",
						"nullable": true,
						"description": "Scope of the license.\r\nSee https://docs.licensegate.io/restriction-options/scope",
						"default": null
					},
					"expirationDate": {
						"type": "string",
						"format": "date-time",
						"nullable": true,
						"description": "Expiration date of the license.\r\nSee https://docs.licensegate.io/restriction-options/expiration",
						"default": null
					},
					"validationPoints": {
						"type": "number",
						"format": "double",
						"nullable": true,
						"description": "Current amount of validation points. This is used for rate limiting.\r\nSee https://docs.licensegate.io/restriction-options/rate-limit",
						"default": null
					},
					"validationLimit": {
						"type": "integer",
						"format": "int32",
						"nullable": true,
						"description": "Maximum amount of validation points. This is used for rate limiting.\r\nSet to null for no rate limiting.\r\nSee https://docs.licensegate.io/restriction-options/rate-limit",
						"default": null
					},
					"replenishAmount": {
						"type": "integer",
						"format": "int32",
						"nullable": true,
						"description": "Amount of validation points to replenish every interval.\r\nSet to null for no rate limiting.\r\nSee https://docs.licensegate.io/restriction-options/rate-limit",
						"default": null
					},
					"replenishInterval": {
						"allOf": [
							{
								"$ref": "#/components/schemas/ReplenishInterval"
							}
						],
						"nullable": true,
						"description": "Interval to replenish validation points.\r\nSet to null for no rate limiting.\r\nSee https://docs.licensegate.io/restriction-options/rate-limit",
						"default": null
					},
					"createdAt": {
						"type": "string",
						"format": "date-time",
						"description": "Date the license was created."
					}
				},
				"required": [
					"id",
					"active",
					"userId",
					"licenseKey",
					"name",
					"notes",
					"ipLimit",
					"ipBoundEnabled",
					"licenseScope",
					"expirationDate",
					"validationPoints",
					"validationLimit",
					"replenishAmount",
					"replenishInterval",
					"createdAt"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResponseError_license-with-same-key-already-exists_": {
				"properties": {
					"error": {
						"type": "string",
						"enum": [
							"license-with-same-key-already-exists"
						],
						"nullable": false
					},
					"details": {
						"description": "Additional details about the error.",
						"default": {}
					}
				},
				"required": [
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResponseError_unauthorized_": {
				"properties": {
					"error": {
						"type": "string",
						"enum": [
							"unauthorized"
						],
						"nullable": false
					},
					"details": {
						"description": "Additional details about the error.",
						"default": {}
					}
				},
				"required": [
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResponseError_invalid-schema_": {
				"properties": {
					"error": {
						"type": "string",
						"enum": [
							"invalid-schema"
						],
						"nullable": false
					},
					"details": {
						"description": "Additional details about the error.",
						"default": {}
					}
				},
				"required": [
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LicenseCreateInput": {
				"description": "Data required to create a license.",
				"properties": {
					"active": {
						"type": "boolean",
						"description": "Whether the license is active.\r\nWhen a license is disabled, it will not validate."
					},
					"name": {
						"type": "string",
						"description": "Name to identify the license."
					},
					"notes": {
						"type": "string",
						"description": "Notes for the license."
					},
					"ipLimit": {
						"type": "integer",
						"format": "int32",
						"description": "Limit of IPs that can validate this license.\r\nSee https://docs.licensegate.io/restriction-options/ip-limit",
						"default": null
					},
					"ipBoundEnabled": {
						"type": "boolean",
						"description": "Whether to bind this license to the first IP that uses it."
					},
					"ip": {
						"type": "string",
						"description": "The first IP that used this license.",
						"default": null
					},
					"licenseScope": {
						"type": "string",
						"description": "Scope of the license.\r\nSee https://docs.licensegate.io/restriction-options/scope",
						"default": null
					},
					"expirationDate": {
						"type": "string",
						"format": "date-time",
						"description": "Expiration date of the license.\r\nSee https://docs.licensegate.io/restriction-options/expiration",
						"default": null
					},
					"validationPoints": {
						"type": "number",
						"format": "double",
						"description": "Current amount of validation points. This is used for rate limiting.\r\nSee https://docs.licensegate.io/restriction-options/rate-limit",
						"default": null
					},
					"validationLimit": {
						"type": "integer",
						"format": "int32",
						"description": "Maximum amount of validation points. This is used for rate limiting.\r\nSet to null for no rate limiting.\r\nSee https://docs.licensegate.io/restriction-options/rate-limit",
						"default": null
					},
					"replenishAmount": {
						"type": "integer",
						"format": "int32",
						"description": "Amount of validation points to replenish every interval.\r\nSet to null for no rate limiting.\r\nSee https://docs.licensegate.io/restriction-options/rate-limit",
						"default": null
					},
					"replenishInterval": {
						"$ref": "#/components/schemas/ReplenishInterval",
						"description": "Interval to replenish validation points.\r\nSet to null for no rate limiting.\r\nSee https://docs.licensegate.io/restriction-options/rate-limit"
					},
					"licenseKey": {
						"type": "string",
						"description": "You can specify a custom license key, or one will be generated (UUIDv4).\r\nIf you specify a custom key, it must be unique."
					}
				},
				"required": [
					"active",
					"name",
					"notes",
					"ipLimit",
					"ipBoundEnabled",
					"licenseScope",
					"expirationDate",
					"validationPoints",
					"validationLimit",
					"replenishAmount",
					"replenishInterval"
				],
				"type": "object",
				"additionalProperties": false
			},
			"ResponseError_not-found_": {
				"properties": {
					"error": {
						"type": "string",
						"enum": [
							"not-found"
						],
						"nullable": false
					},
					"details": {
						"description": "Additional details about the error.",
						"default": {}
					}
				},
				"required": [
					"error"
				],
				"type": "object",
				"additionalProperties": false
			},
			"LicenseUpdateInput": {
				"description": "Data required to update a license.\r\nUpdates are partial, so all fields are optional.",
				"properties": {
					"licenseKey": {
						"type": "string",
						"description": "License key."
					},
					"active": {
						"type": "boolean",
						"description": "Whether the license is active.\r\nWhen a license is disabled, it will not validate."
					},
					"name": {
						"type": "string",
						"description": "Name to identify the license."
					},
					"notes": {
						"type": "string",
						"description": "Notes for the license."
					},
					"ipLimit": {
						"type": "integer",
						"format": "int32",
						"description": "Limit of IPs that can validate this license.\r\nSee https://docs.licensegate.io/restriction-options/ip-limit",
						"default": null
					},
					"ipBoundEnabled": {
						"type": "boolean",
						"description": "Whether to bind this license to the first IP that uses it."
					},
					"ip": {
						"type": "string",
						"description": "The first IP that used this license.",
						"default": null
					},
					"licenseScope": {
						"type": "string",
						"description": "Scope of the license.\r\nSee https://docs.licensegate.io/restriction-options/scope",
						"default": null
					},
					"expirationDate": {
						"type": "string",
						"format": "date-time",
						"description": "Expiration date of the license.\r\nSee https://docs.licensegate.io/restriction-options/expiration",
						"default": null
					},
					"validationPoints": {
						"type": "number",
						"format": "double",
						"description": "Current amount of validation points. This is used for rate limiting.\r\nSee https://docs.licensegate.io/restriction-options/rate-limit",
						"default": null
					},
					"validationLimit": {
						"type": "integer",
						"format": "int32",
						"description": "Maximum amount of validation points. This is used for rate limiting.\r\nSet to null for no rate limiting.\r\nSee https://docs.licensegate.io/restriction-options/rate-limit",
						"default": null
					},
					"replenishAmount": {
						"type": "integer",
						"format": "int32",
						"description": "Amount of validation points to replenish every interval.\r\nSet to null for no rate limiting.\r\nSee https://docs.licensegate.io/restriction-options/rate-limit",
						"default": null
					},
					"replenishInterval": {
						"$ref": "#/components/schemas/ReplenishInterval",
						"description": "Interval to replenish validation points.\r\nSet to null for no rate limiting.\r\nSee https://docs.licensegate.io/restriction-options/rate-limit"
					}
				},
				"type": "object",
				"additionalProperties": false
			},
			"ValidationResult": {
				"type": "string",
				"enum": [
					"VALID",
					"NOT_FOUND",
					"NOT_ACTIVE",
					"EXPIRED",
					"LICENSE_SCOPE_FAILED",
					"IP_LIMIT_EXCEEDED",
					"RATE_LIMIT_EXCEEDED",
					"BOUND_IP_MISMATCH"
				],
				"example": "VALID",
				"description": "The result of the license verification.\r\n- `VALID`: The license is valid\r\n- `NOT_FOUND`: The license was not found\r\n- `NOT_ACTIVE`: The license is not active\r\n- `EXPIRED`: The license has expired\r\n- `LICENSE_SCOPE_FAILED`: The scope of the license does not match the scope in the request\r\n- `IP_LIMIT_EXCEEDED`: The IP limit has been exceeded\r\n- `RATE_LIMIT_EXCEEDED`: The rate limit has been exceeded\r\n- 'BOUND_IP_MISMATCH': The request was made from an IP address that does not match the one bound to the license"
			},
			"ValidationResponse": {
				"properties": {
					"valid": {
						"type": "boolean",
						"description": "Whether the license is valid. (Short for `result == \"VALID\"`)",
						"example": true
					},
					"result": {
						"$ref": "#/components/schemas/ValidationResult"
					},
					"signedChallenge": {
						"type": "string",
						"description": "The challenge signed by the server. Only present if a challenge was provided in the request.",
						"example": "23fa25/7dd..."
					}
				},
				"required": [
					"valid",
					"result"
				],
				"type": "object",
				"additionalProperties": false
			},
			"VerificationOptions": {
				"description": "Options for the license verification.",
				"properties": {
					"scope": {
						"type": "string",
						"description": "The scope of the license. Required if the license has a <a href=\"restriction-options/scope\">scope restriction</a>",
						"example": "premium"
					},
					"challenge": {
						"type": "string",
						"description": "A challenge that will be signed by the server. We recommend to use the current time in milliseconds as the challenge. See <a href=\"security-considerations\">Security considerations</a> for more information.",
						"example": "1634567890123"
					},
					"metadata": {
						"type": "string",
						"description": "A string that will be logged with the license verification. This can be used to log additional information about the verification request."
					}
				},
				"type": "object",
				"additionalProperties": false
			}
		},
		"securitySchemes": {
			"api_key": {
				"type": "apiKey",
				"name": "Authorization",
				"in": "header"
			}
		}
	},
	"info": {
		"title": "LicenseGate API",
		"version": "1.0.1",
		"description": "REST API for verifying and managing licenses",
		"license": {
			"name": "ISC"
		},
		"contact": {}
	},
	"paths": {
		"/admin/licenses": {
			"post": {
				"operationId": "Create",
				"responses": {
					"201": {
						"description": "Created",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/License"
								}
							}
						}
					},
					"400": {
						"description": "License with same key already exists",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseError_license-with-same-key-already-exists_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseError_unauthorized_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					},
					"422": {
						"description": "Invalid schema",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseError_invalid-schema_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Create a new license.",
				"summary": "Create license",
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LicenseCreateInput"
							}
						}
					}
				}
			},
			"get": {
				"operationId": "List",
				"responses": {
					"200": {
						"description": "List of licenses and total count.",
						"content": {
							"application/json": {
								"schema": {
									"properties": {
										"count": {
											"type": "number",
											"format": "double"
										},
										"licenses": {
											"items": {
												"$ref": "#/components/schemas/License"
											},
											"type": "array"
										}
									},
									"required": [
										"count",
										"licenses"
									],
									"type": "object"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseError_unauthorized_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					},
					"422": {
						"description": "Invalid schema",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseError_invalid-schema_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "List licenses for the authenticated account.",
				"summary": "List licenses",
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"description": "Number of licenses to take.",
						"in": "query",
						"name": "take",
						"required": false,
						"schema": {
							"default": 10,
							"format": "int32",
							"type": "integer"
						}
					},
					{
						"description": "Number of licenses to skip.",
						"in": "query",
						"name": "skip",
						"required": false,
						"schema": {
							"default": 0,
							"format": "int32",
							"type": "integer"
						}
					},
					{
						"description": "Filter licenses by status.",
						"in": "query",
						"name": "filterStatus",
						"required": false,
						"schema": {
							"type": "string",
							"enum": [
								"active",
								"disabled/expired"
							]
						}
					},
					{
						"description": "Include logs for each license.",
						"in": "query",
						"name": "includeLogs",
						"required": false,
						"schema": {
							"default": false,
							"type": "boolean"
						}
					}
				]
			}
		},
		"/admin/licenses/{licenseId}": {
			"get": {
				"operationId": "Read",
				"responses": {
					"200": {
						"description": "The license.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/License"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseError_unauthorized_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					},
					"404": {
						"description": "License not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseError_not-found_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					},
					"422": {
						"description": "Invalid schema",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseError_invalid-schema_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Read a license by ID.",
				"summary": "Read license",
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"description": "License ID.",
						"in": "path",
						"name": "licenseId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					},
					{
						"description": "Include logs for this license.",
						"in": "query",
						"name": "includeLogs",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					}
				]
			},
			"patch": {
				"operationId": "Update",
				"responses": {
					"200": {
						"description": "The updated license.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/License"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseError_unauthorized_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					},
					"404": {
						"description": "License not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseError_not-found_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					},
					"422": {
						"description": "Invalid schema",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseError_invalid-schema_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Update a license by ID.",
				"summary": "Update license",
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"description": "License ID.",
						"in": "path",
						"name": "licenseId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/LicenseUpdateInput"
							}
						}
					}
				}
			},
			"delete": {
				"operationId": "Delete",
				"responses": {
					"200": {
						"description": "The deleted license.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/License"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseError_unauthorized_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					},
					"404": {
						"description": "License not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseError_not-found_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					},
					"422": {
						"description": "Invalid schema",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseError_invalid-schema_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Delete a license by ID.",
				"summary": "Delete license",
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"description": "License ID.",
						"in": "path",
						"name": "licenseId",
						"required": true,
						"schema": {
							"format": "double",
							"type": "number"
						}
					}
				]
			}
		},
		"/admin/licenses/key/{licenseKey}": {
			"get": {
				"operationId": "ReadByLicenseKey",
				"responses": {
					"200": {
						"description": "The license.",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/License"
								}
							}
						}
					},
					"401": {
						"description": "Unauthorized",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseError_unauthorized_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					},
					"404": {
						"description": "License not found",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseError_not-found_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					},
					"422": {
						"description": "Invalid schema",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseError_invalid-schema_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Read a license by its license key.",
				"summary": "Read license by license key",
				"tags": [
					"Admin"
				],
				"security": [
					{
						"api_key": []
					}
				],
				"parameters": [
					{
						"description": "License key.",
						"in": "path",
						"name": "licenseKey",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "Include logs for this license.",
						"in": "query",
						"name": "includeLogs",
						"required": false,
						"schema": {
							"type": "boolean"
						}
					}
				]
			}
		},
		"/license/{userId}/{licenseKey}/verify": {
			"get": {
				"operationId": "VerifyLicenseGet",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationResponse"
								},
								"examples": {
									"License is valid": {
										"value": {
											"valid": true,
											"result": "VALID"
										}
									},
									"License is valid (signed challenge)": {
										"value": {
											"valid": true,
											"result": "VALID",
											"signedChallenge": "23fa25/7dd..."
										}
									},
									"License has expired": {
										"value": {
											"valid": false,
											"result": "EXPIRED"
										}
									},
									"License not found": {
										"value": {
											"valid": false,
											"result": "NOT_FOUND"
										}
									},
									"License scope does not match": {
										"value": {
											"valid": false,
											"result": "LICENSE_SCOPE_FAILED"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Invalid request schema",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseError_invalid-schema_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Verify a license",
				"summary": "Verify license",
				"tags": [
					"Public"
				],
				"security": [],
				"parameters": [
					{
						"description": "The user ID (from web panel) that owns the license",
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The license key",
						"in": "path",
						"name": "licenseKey",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The scope of the license. Required if the license has a <a href=\"restriction-options/scope\">scope restriction</a>",
						"in": "query",
						"name": "scope",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A challenge that will be signed by the server. We recommend to use the current time in milliseconds as the challenge. See <a href=\"security-considerations\">Security considerations</a> for more information.",
						"in": "query",
						"name": "challenge",
						"required": false,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "A string that will be logged with the license verification. This can be used to log additional information about the verification request.",
						"in": "query",
						"name": "metadata",
						"required": false,
						"schema": {
							"type": "string"
						}
					}
				]
			},
			"post": {
				"operationId": "VerifyLicensePost",
				"responses": {
					"200": {
						"description": "Ok",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ValidationResponse"
								},
								"examples": {
									"License is valid": {
										"value": {
											"valid": true,
											"result": "VALID"
										}
									},
									"License is valid (signed challenge)": {
										"value": {
											"valid": true,
											"result": "VALID",
											"signedChallenge": "23fa25/7dd..."
										}
									},
									"License has expired": {
										"value": {
											"valid": false,
											"result": "EXPIRED"
										}
									},
									"License not found": {
										"value": {
											"valid": false,
											"result": "NOT_FOUND"
										}
									},
									"License scope does not match": {
										"value": {
											"valid": false,
											"result": "LICENSE_SCOPE_FAILED"
										}
									}
								}
							}
						}
					},
					"422": {
						"description": "Invalid request schema",
						"content": {
							"application/json": {
								"schema": {
									"$ref": "#/components/schemas/ResponseError_invalid-schema_"
								},
								"examples": {
									"Example 1": {}
								}
							}
						}
					}
				},
				"description": "Verify a license",
				"summary": "Verify license",
				"tags": [
					"Public"
				],
				"security": [],
				"parameters": [
					{
						"description": "The user ID (from web panel) that owns the license",
						"in": "path",
						"name": "userId",
						"required": true,
						"schema": {
							"type": "string"
						}
					},
					{
						"description": "The license key",
						"in": "path",
						"name": "licenseKey",
						"required": true,
						"schema": {
							"type": "string"
						}
					}
				],
				"requestBody": {
					"required": true,
					"content": {
						"application/json": {
							"schema": {
								"$ref": "#/components/schemas/VerificationOptions"
							}
						}
					}
				}
			}
		}
	},
	"servers": [
		{
			"url": "http://localhost:8080",
			"description": "Local server"
		},
		{
			"url": "https://api.licensegate.io",
			"description": "Production server"
		}
	]
}